name: Deploy to GKE

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  GAR_LOCATION: asia-south1 
  IMAGE: hello_world_app

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      GKE_CLUSTER: ${{ secrets.GKE_CLUSTER_NAME }}
      GKE_ZONE: ${{ secrets.GKE_ZONE }}
      REPOSITORY: ${{ secrets.GCP_ARTIFACT_REPO }}
      GCS_BUCKET_NAME: ${{ secrets.GCS_BUCKET_NAME }}

    steps:
      # 1️⃣ Checkout code
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2️⃣ Authenticate with GCP using Service Account
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # 3️⃣ Set up Cloud SDK
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      # 4️⃣ Install GKE gcloud auth plugin
      - name: Install GKE gcloud auth plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin --quiet
          gcloud components update --quiet

      # 5️⃣ Configure Docker for Artifact Registry
      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev --quiet

      # 6️⃣ Install app dependencies (Node.js)
      - name: Install Node.js dependencies
        working-directory: ./Hello_world_app
        run: |
          npm install

      # 7️⃣ Build Docker Image (with version tag)
      - name: Build Docker Image
        run: |
          VERSION=${{ github.run_number }}
          IMAGE_URI=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_ARTIFACT_REPO }}/${{ env.IMAGE }}
          docker build -f ./Hello_world_app/Dockerfile \
            -t $IMAGE_URI:$VERSION \
            -t $IMAGE_URI:latest \
            -t $IMAGE_URI:${{ github.sha }} .
      
      - name: Install Trivy
        run: |
         curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh -s -- -b /usr/local/bin

      # 8️⃣ Scan Docker image with Trivy, upload report to GCS
      - name: Scan Docker image with Trivy and upload report
        run: |
          VERSION=${{ github.run_number }}
          IMAGE_NAME=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_ARTIFACT_REPO }}/${{ env.IMAGE }}:$VERSION
          REPORT_FILE=trivy-report-${VERSION}-${GITHUB_SHA}.json

          # Scan Docker image
          trivy image --format json --output $REPORT_FILE $IMAGE_NAME --severity HIGH,CRITICAL

          # Show vulnerabilities in console
          trivy image --severity HIGH,CRITICAL $IMAGE_NAME || echo "High/Critical vulnerabilities detected!"
                   #exitcode 1

          # Upload report to GCS with versioned filename
          gsutil cp $REPORT_FILE gs://${{ secrets.GCS_BUCKET_NAME }}/trivy-reports/$REPORT_FILE

      # 9️⃣ Cleanup old Trivy reports in GCS (keep latest 3)
      - name: Cleanup old Trivy reports in GCS (keep latest 3)
        run: |
          gsutil ls gs://${{ secrets.GCS_BUCKET_NAME }}/trivy-reports/ \
            | sort -r \
            | tail -n +4 \
            | xargs -n 1 gsutil rm || echo "No old reports to delete"

      # 🔟 Push Docker image to Artifact Registry
      - name: Push Docker image
        run: |
          VERSION=${{ github.run_number }}
          IMAGE_URI=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_ARTIFACT_REPO }}/${{ env.IMAGE }}

          docker push $IMAGE_URI:$VERSION
          docker push $IMAGE_URI:latest
          docker push $IMAGE_URI:${{ github.sha }}

      # 1️⃣1️⃣ Cleanup old Docker image versions (keep latest 4)
      - name: Cleanup old Docker image versions in Artifact Registry
        run: |
          # Define variables
          LOCATION=${{ env.GAR_LOCATION }}
          PROJECT=${{ secrets.GCP_PROJECT_ID }}
          REPO=${{ secrets.GCP_ARTIFACT_REPO }}
          IMAGE=${{ env.IMAGE }}

          echo "All tags:"
          IMAGES_TO_DELETE=$(gcloud artifacts docker images list $LOCATION-docker.pkg.dev/$PROJECT/$REPO/$IMAGE \
          --include-tags \
          --sort-by=~updateTime \
          --format="get(tags)" \
          | tr ',;' '\n' \          
          | sed '/^$/d' \           
          | tail -n +5)            


          echo "Tags selected for deletion:"
          echo "$IMAGES_TO_DELETE"
          
          # Delete each old tag   
          for tag in $IMAGES_TO_DELETE; do
           echo "Deleting $IMAGE:$tag"
           gcloud artifacts docker images delete "$LOCATION-docker.pkg.dev/$PROJECT/$REPO/$IMAGE:$tag" --quiet
          done

      # 1️⃣2️⃣ Get GKE credentials
      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} \
            --region ${{ env.GAR_LOCATION }} \
            --project ${{ secrets.GCP_PROJECT_ID }}

      # 1️⃣3️⃣ Update Kubernetes Deployment image
      - name: Update Kubernetes Deployment image
        run: |
          sed -i "s|image:.*|image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_ARTIFACT_REPO }}/${{ env.IMAGE }}:${{ github.sha }}|g" k8s/deployment.yaml

      # 1️⃣4️⃣ Deploy to GKE
      - name: Deploy to GKE
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          kubectl set image deployment/hello-world-deployment \
            hello-world=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_ARTIFACT_REPO }}/${{ env.IMAGE }}:${{ github.sha }}
          kubectl rollout status deployment/hello-world-deployment
          kubectl get pods
          kubectl get svc hello-world-service
    
    # 1️⃣5️⃣ Deploy Ingress
      - name: Deploy Ingress
        run: |
         kubectl apply -f k8s/ingress.yaml
         kubectl get ingress
 

      # 1️⃣6️⃣ Slack Notification (optional)
      #- name: Slack Notification
      #  uses: slackapi/slack-github-action@v1
      #  with:
      #    payload: >
      #      {
      #        "text": "✅ Deployment completed for image ${{ env.IMAGE }}.\nTrivy report: gs://${{ secrets.GCS_BUCKET_NAME }}/trivy-reports/trivy-report-${{ github.run_number }}-${GITHUB_SHA}.json",
      #        "channel": "#devsecops"
      #      }
      #  env:
      #    SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

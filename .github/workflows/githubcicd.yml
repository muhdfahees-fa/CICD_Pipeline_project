name: Deploy to GKE

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  GAR_LOCATION: asia-south1 
  IMAGE: hello_world_app

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      GKE_CLUSTER: ${{ secrets.GKE_CLUSTER_NAME }}
      GKE_ZONE: ${{ secrets.GKE_ZONE }}
      REPOSITORY: ${{ secrets.GCP_ARTIFACT_REPO }}
      GCS_BUCKET_NAME: ${{ secrets.GCS_BUCKET_NAME }}

    steps:
      # 1️⃣ Checkout code
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2️⃣ Authenticate with GCP using Service Account
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # 3️⃣ Set up Cloud SDK
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      # 4️⃣ Install GKE gcloud auth plugin
      - name: Install GKE gcloud auth plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin --quiet
          gcloud components update --quiet

      # 5️⃣ Configure Docker for Artifact Registry
      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev --quiet

      # 6️⃣ Install app dependencies (Node.js)
      - name: Install Node.js dependencies
        working-directory: ./Hello_world_app
        run: |
          npm install
          # optional: npm run build

      # 7️⃣ Build Docker image
      - name: Build Docker image
        run: |
          docker build -f ./Hello_world_app/Dockerfile \
            -t ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_ARTIFACT_REPO }}/${{ env.IMAGE }}:${{ github.sha }} .
      # 9️⃣ Scan Docker image with Trivy and upload report to GCS
      - name: Scan Docker image with Trivy and upload report
        uses: aquasecurity/trivy-action@master
        with:
         image-ref: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_ARTIFACT_REPO }}/${{ env.IMAGE }}:${{ github.sha }}
         format: json
         output: trivy-report-${{ github.sha }}.json
        # exit-code: '1'  # fail on HIGH or CRITICAL vulnerabilities
         severity: HIGH,CRITICAL
         run: |
          gsutil cp trivy-report-${{ github.sha }}.json gs://${{ secrets.GCS_BUCKET_NAME }}/trivy-reports/

      # 9️⃣ Trivy scan before pushing
      - name: Scan Docker image with Trivy
        run: |
          IMAGE_NAME=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_ARTIFACT_REPO }}/${{ env.IMAGE }}:${{ github.sha }}
          REPORT_FILE=trivy-report-${GITHUB_SHA}.json

          # Scan image
          trivy image --format json --output $REPORT_FILE $IMAGE_NAME

          # Upload report to GCS
          gsutil cp $REPORT_FILE gs://${{ secrets.GCS_BUCKET_NAME }}/trivy-reports/$REPORT_FILE

          # Fail pipeline if high or critical vulnerabilities found
          trivy image --exit-code 1 --severity HIGH,CRITICAL $IMAGE_NAME || echo "High/Critical vulnerabilities detected!"

      # 🔟 Push Docker image to Artifact Registry
      - name: Push Docker image to Artifact Registry
        run: |
          docker push ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_ARTIFACT_REPO }}/${{ env.IMAGE }}:${{ github.sha }}

      # 1️⃣1️⃣ Get GKE credentials
      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} \
            --region ${{ secrets.GKE_ZONE }} \
            --project ${{ secrets.GCP_PROJECT_ID }}

      # 1️⃣2️⃣ Update Kubernetes Deployment image
      - name: Update Kubernetes Deployment image
        run: |
          sed -i "s|image:.*|image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_ARTIFACT_REPO }}/${{ env.IMAGE }}:${{ github.sha }}|g" k8s/deployment.yaml

      # 1️⃣3️⃣ Deploy to GKE
      - name: Deploy to GKE
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          kubectl set image deployment/hello-world-deployment \
            hello-world=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_ARTIFACT_REPO }}/${{ env.IMAGE }}:${{ github.sha }}
          kubectl rollout status deployment/hello-world-deployment
          kubectl get pods
          kubectl get svc hello-world-service

      # 1️⃣4️⃣ Slack Notification
      #- name: Slack Notification
       # uses: slackapi/slack-github-action@v1
        #with:
         # payload: >
          #  {
           #   "text": "✅ Deployment completed for image ${{ env.IMAGE }}.\nTrivy report: gs://${{ secrets.GCS_BUCKET_NAME }}/trivy-reports/trivy-report-${GITHUB_SHA}.json",
            #  "channel": "#devsecops"
            #}
        #env:
         # SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
